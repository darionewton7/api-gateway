name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7

jobs:
  test:
    name: Testes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: payment-gateway/package-lock.json

      - name: Instalar dependências
        run: cd payment-gateway && npm install

      - name: Executar testes
        run: cd payment-gateway && npm test

  terraform-validate:
    name: Validar Terraform
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Validar módulos Terraform
        run: |
          cd terraform/modules/vpc && terraform init -backend=false && terraform validate
          cd ../../modules/security && terraform init -backend=false && terraform validate
          cd ../../modules/ecs && terraform init -backend=false && terraform validate
          cd ../../modules/alb && terraform init -backend=false && terraform validate
          cd ../../modules/rds && terraform init -backend=false && terraform validate
          cd ../../modules/terraform-state && terraform init -backend=false && terraform validate
          cd ../../modules/payment-gateway && terraform init -backend=false && terraform validate

  terraform-plan-staging:
    name: Terraform Plan (Staging)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    environment: staging
    env:
      TF_WORKSPACE: staging
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: cd terraform/environments/staging && terraform init

      - name: Terraform Plan
        run: cd terraform/environments/staging && terraform plan -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_STAGING }}
          TF_VAR_stripe_api_key: ${{ secrets.STRIPE_API_KEY_STAGING }}

      - name: Salvar Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-staging
          path: terraform/environments/staging/tfplan
          retention-days: 1

  terraform-apply-staging:
    name: Terraform Apply (Staging)
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    env:
      TF_WORKSPACE: staging
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-staging
          path: terraform/environments/staging

      - name: Terraform Init
        run: cd terraform/environments/staging && terraform init

      - name: Terraform Apply
        run: cd terraform/environments/staging && terraform apply -auto-approve tfplan

  deploy-lambda-staging:
    name: Deploy Lambda (Staging)
    runs-on: ubuntu-latest
    needs: terraform-apply-staging
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: payment-gateway/package-lock.json

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Empacotar Lambda
        run: cd payment-gateway && chmod +x package.sh && ./package.sh

      - name: Deploy Lambda
        run: |
          aws lambda update-function-code \
            --function-name payment-gateway-staging-payment-processor \
            --zip-file fileb://payment-gateway/lambda_function.zip

  terraform-plan-production:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      TF_WORKSPACE: production
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: cd terraform/environments/production && terraform init

      - name: Terraform Plan
        run: cd terraform/environments/production && terraform plan -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD_PRODUCTION }}
          TF_VAR_stripe_api_key: ${{ secrets.STRIPE_API_KEY_PRODUCTION }}

      - name: Salvar Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-production
          path: terraform/environments/production/tfplan
          retention-days: 1

  terraform-apply-production:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    needs: terraform-plan-production
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      TF_WORKSPACE: production
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-production
          path: terraform/environments/production

      - name: Terraform Init
        run: cd terraform/environments/production && terraform init

      - name: Terraform Apply
        run: cd terraform/environments/production && terraform apply -auto-approve tfplan

  deploy-lambda-production:
    name: Deploy Lambda (Production)
    runs-on: ubuntu-latest
    needs: terraform-apply-production
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: payment-gateway/package-lock.json

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Empacotar Lambda
        run: cd payment-gateway && chmod +x package.sh && ./package.sh

      - name: Deploy Lambda
        run: |
          aws lambda update-function-code \
            --function-name payment-gateway-production-payment-processor \
            --zip-file fileb://payment-gateway/lambda_function.zip

  notify:
    name: Notificar Resultado
    runs-on: ubuntu-latest
    needs: [deploy-lambda-staging, deploy-lambda-production]
    if: always()
    steps:
      - name: Notificar Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
